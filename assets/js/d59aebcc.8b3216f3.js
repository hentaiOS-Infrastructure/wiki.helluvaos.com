"use strict";(self.webpackChunkhentaiwiki=self.webpackChunkhentaiwiki||[]).push([[740],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=i,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3398:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={},o="Security",s={unversionedId:"technical-data/security",id:"technical-data/security",title:"Security",description:"This section describes the security requirements for the device.",source:"@site/docs/technical-data/security.md",sourceDirName:"technical-data",slug:"/technical-data/security",permalink:"/docs/technical-data/security",draft:!1,editUrl:"https://github.com/hentaiOS-Infrastructure/wiki-frontpage-develop/edit/master/docs/technical-data/security.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Performance",permalink:"/docs/technical-data/performance"},next:{title:"Planned Maintenance FAQ",permalink:"/docs/infra/scheduled-maint-faq"}},l={},c=[{value:"Android Verified Boot",id:"android-verified-boot",level:2},{value:"Integrating with Buildsystem",id:"integrating-with-buildsystem",level:3},{value:"End-User Root of Trust Configuration",id:"end-user-root-of-trust-configuration",level:2},{value:"Normal Devices",id:"normal-devices",level:3}],u={toc:c};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"security"},"Security"),(0,i.kt)("p",null,"This section describes the security requirements for the device."),(0,i.kt)("h2",{id:"android-verified-boot"},"Android Verified Boot"),(0,i.kt)("p",null,"Verified Boot is the process of verifying the integrity of the Android operating system.\nIt typically starts with a read-only portion of the device firmware which loads\ncode and executes it only if the integrity of the device is verified."),(0,i.kt)("h3",{id:"integrating-with-buildsystem"},"Integrating with Buildsystem"),(0,i.kt)("p",null,"Refer to ",(0,i.kt)("a",{parentName:"p",href:"https://android.googlesource.com/platform/external/avb/+/refs/tags/android-11.0.0_r39/README.md#build-system-integration"},"Android Verified Boot 2.0 Build System Integration")," for details on how to integrate verified boot into your build system."),(0,i.kt)("p",null,"Before getting started, Our private keys are available in ",(0,i.kt)("inlineCode",{parentName:"p"},"private_keys")," repository. Clone the repository to ",(0,i.kt)("inlineCode",{parentName:"p"},"vendor/hentai/build/target/product/security"),"."),(0,i.kt)("p",null,"AVB is enabled with ",(0,i.kt)("inlineCode",{parentName:"p"},"BOARD_AVB_ENABLE")," variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"BOARD_AVB_ENABLE := true\n")),(0,i.kt)("p",null,"By default, the algorithm ",(0,i.kt)("inlineCode",{parentName:"p"},"SHA256_RSA4096")," is used with keys from ",(0,i.kt)("inlineCode",{parentName:"p"},"vendor/hentai/build/target/product/security")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"BOARD_AVB_ALGORITHM := SHA256_RSA4096\nBOARD_AVB_KEY_PATH := $(PROD_CERTS)/hentai_rsa4096.pem\n")),(0,i.kt)("p",null,"Devices with ",(0,i.kt)("inlineCode",{parentName:"p"},"vbmeta")," partitions should configured to use ",(0,i.kt)("a",{parentName:"p",href:"https://android.googlesource.com/platform/external/avb/+/refs/tags/android-11.0.0_r39/README.md#chained-partitions"},"chained partitions"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"BOARD_AVB_VBMETA_SYSTEM := system system_ext\nBOARD_AVB_VBMETA_SYSTEM_KEY_PATH := $(PROD_CERTS)/hentai_rsa2048.pem\nBOARD_AVB_VBMETA_SYSTEM_ALGORITHM := SHA256_RSA2048\nBOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX_LOCATION := 1\n")),(0,i.kt)("p",null,"To prevent rollback attacks, the rollback index location should be set to a value greater than 0 and increased on a regular basis (we sets our index as our Security Patch timestamp). The rollback index can be set with the ",(0,i.kt)("inlineCode",{parentName:"p"},"BOARD_AVB_VBMETA_ROLLBACK_INDEX")," variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX := $(PLATFORM_SECURITY_PATCH_TIMESTAMP)\n")),(0,i.kt)("p",null,"Some devices support the end-user configuring the root of trust to use, in this case, see ",(0,i.kt)("a",{parentName:"p",href:"#end-user-root-of-trust-configuration"},"End-User Root of Trust Configuration")," for details."),(0,i.kt)("h2",{id:"end-user-root-of-trust-configuration"},"End-User Root of Trust Configuration"),(0,i.kt)("p",null,"This section describes the end-user configuration of the root of trust."),(0,i.kt)("h3",{id:"normal-devices"},"Normal Devices"),(0,i.kt)("p",null,"On sane devices, the boot loader supports a virtual partition with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"avb_custom_key"),". Flashing and erasing this partition only works in the UNLOCKED state. Setting the custom key is done like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"avbtool extract_public_key --key key.pem --output pkmd.bin\nfastboot flash avb_custom_key pkmd.bin\n")),(0,i.kt)("p",null,"Erasing the key is done by erasing the virtual partition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Blueprint"},"fastboot erase avb_custom_key\n")),(0,i.kt)("p",null,"When the custom key is set and the device is in the LOCKED state it will boot images signed with both the built-in key as well as the custom key. All other security features (including rollback-protection) are in effect, e.g. the only difference is the root of trust to use."),(0,i.kt)("p",null,"When booting an image signed with a custom key, a yellow screen will be shown as part of the boot process to remind the user that the custom key is in use."))}d.isMDXComponent=!0}}]);